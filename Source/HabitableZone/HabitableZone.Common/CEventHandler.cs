using System;

namespace HabitableZone.Common
{
	/// <summary>
	///    Less cumbersome and type-safe alternative to System.EventHandler.
	/// </summary>
	public delegate void CEventHandler();

	/// <summary>
	///    Less cumbersome and type-safe alternative to System.EventHandler.
	/// </summary>
	/// <param name="sender">The source of the event.</param>
	/// <typeparam name="TSender">The type of the event sender.</typeparam>
	public delegate void CEventHandler<in TSender>(TSender sender);

	/// <summary>
	///    Less cumbersome and type-safe alternative to System.EventHandler.
	/// </summary>
	/// <param name="sender">The source of the event.</param>
	/// <param name="args">An object that contains the event data.</param>
	/// <typeparam name="TSender">The type of the event sender.</typeparam>
	/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
	public delegate void CEventHandler<in TSender, in TEventArgs>(TSender sender, TEventArgs args)
		where TEventArgs : EventArgs;

	/// <summary>
	///    Less cumbersome and type-safe alternative to System.EventHandler.
	///    This event handler carries sender and single data object of any type.
	///    Use it when you want to carry single data unit instead of inheriting EventArgs.
	/// </summary>
	/// <param name="sender">The source of the event.</param>
	/// <param name="data">Event data.</param>
	/// <typeparam name="TSender"></typeparam>
	/// <typeparam name="TData">Type of event data.</typeparam>
	public delegate void SEventHandler<in TSender, in TData>(TSender sender, TData data);

	/// <summary>
	///    Less cumbersome and type-safe alternative to System.EventHandler.
	///    This event handler carries single data object of any type.
	///    Use it when you don't wand to carry sender and to inherit EventArgs.
	/// </summary>
	/// <param name="data">Event data.</param>
	/// <typeparam name="TData">Type of event data.</typeparam>
	public delegate void SEventHandler<in TData>(TData data);
}